@import '103-sort_list';

// Declare the default sort order. Use Sass's !default flag so this
// value doesn't override the variable if it was already declared.
$default-sort-order: a b c d e f g h i j k l m n o p q r s t u v w x y z !default;

// Compares two string to determine which comes first
/// @param {String} $string-a - first string
/// @param {String} $string-b - second string
/// @param {List} $order - default sort order
/// @return {Bool} // True
                        // If $string-a is first in alphabethical order
                        //                  or
                        // if $string-a is more short, because all comparation of letters was same
                   // False
                        // If $string-a is not first in alphabethical order
                        //                  or
                        // if $string-a is not more short, because all comparation of letters was same



//                     Astring    Bstring           
@function str-compare($string-a, $string-b, $order: $default-sort-order) {
    // Cast values strings to lowercase to normalize data
    $string-a: to-lower-case($string-a); //=> astring
    $string-b: to-lower-case($string-b); //=> bstring     
  
    // Loop through and compare the characters of each string...
    //                                              (7) => minimum value                        
    @for $i from 1 through min(str-length($string-a), str-length($string-b)) { //= @for $i from 1 through 7
  
      // Extract a character from each string
      // str-slice(string, start, end):
      // Extracts characters from string; start at 'start' and end at 'end', and returns the slice.
      // !ยก In Sass, the first character in a string is at index 1, not 0.
      $char-a: str-slice($string-a, $i, $i); //=> str-slice(astring, 1, 1) => a
      $char-b: str-slice($string-b, $i, $i); //=> str-slice(bstring, 1, 1) => b
      
      // Compare character of $string-a and $string-b
      // if char-a exist and char-b exist and the index in list $default-sort-order is different for $char-a and $char-b
      @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) { //=> @if a and b and 1 != 2
        @return index($order, $char-a) < index($order, $char-b); //=> @return 1 < 2; => True
      }
    }
    
    // In case they are equal after all characters in one string are compared,
    // return the shortest first
    @return str-length($string-a) < str-length($string-b);
}

/// Swaps values at indexes `$a` and `$b` from `$list`
/// @param {List} $list - list to update
/// @param {Number} $a - index of first element
/// @param {Number} $b - index of second element
/// @return {List}
@function swap($list, $index-a, $index-b) {
    @if abs($index-a) > length($list) or abs($index-b) > length($list) {
      @return $list;
    }
    $tmp: nth($list, $index-a);
    $list: set-nth($list, $index-a, nth($list, $index-b));
    $list: set-nth($list, $index-b, $tmp);
    @return $list;
}

@function sort($list, $order: $default-sort-order) {

    // Cycle through each item in the list
    @for $i from 1 through length($list) {
        
      @for $j from $i through 1 {

        // Compare both values
        @if $j > 1 and str-compare(nth($list, $j), nth($list, $j - 1), $order) {
          // If the item should go before the other, swap them
          $list: swap($list, $j, $j - 1);
        }
      }
    }
  
    // Return the sorted list
    @return $list;
}

  @debug sort($list_to_sort)
